evaluate-commands %sh{
  cork init
  kak-lsp --kakoune -s $kak_session
}

# kak-lsp debugging
# nop %sh{ rm -f /tmp/kak-lsp.log }
# set-option global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

declare-option bool in_own_factorio_project false
evaluate-commands %sh{
  if [ -f "info.json" ] && [ $(jq -r ".author" < info.json) = "raiguard" ]; then
    echo "hook global BufWritePre .*\.lua format"
  fi
}

# --------------------------------------------------
# PLUGINS

cork kakoune-ghwiki "https://gitlab.com/Screwtapello/kakoune-ghwiki"

cork auto-pairs.kak "https://github.com/alexherbo2/auto-pairs.kak" %{
  enable-auto-pairs
}

cork kak-ansi "https://github.com/eraserhd/kak-ansi" %{
  hook global BufSetOption filetype=make ansi-enable
}

cork kak-fastbuild "https://github.com/raiguard/kak-fastbuild"

cork kak-harpoon "https://github.com/raiguard/kak-harpoon" %{
  harpoon-add-bindings
}

cork kak-mark "https://github.com/raiguard/kak-mark" %{
  set-face global MarkedPrimaryCursor black,magenta
  set-face global MarkedPrimarySelection black,magenta
  set-face global MarkedSecondaryCursor MarkedPrimaryCursor
  set-face global MarkedSecondarySelection MarkedPrimarySelection
}

cork kak-mirror "https://github.com/raiguard/kak-mirror" %{
  map global normal "'" ': enter-user-mode -lock mirror<ret>' -docstring 'mirror lock'
}

cork kak-move-lines "https://github.com/raiguard/kak-move-lines" %{
  map global normal <c-a-j> ':move-lines-down %val{count}<ret>'
  map global normal <c-a-k> ':move-lines-up %val{count}<ret>'
}

# cork kak-live-grep "https://github.com/raiguard/kak-live-grep" %{
#   map global user / ": live-grep<ret>" -docstring "live grep"
#   hook global User ColorschemeLoaded %{
#     set-face global LiveGrepMatch ,,bright-yellow+u
#   }
# }

cork kak-rainbower "https://github.com/crizan/kak-rainbower" %{
  set-option global rainbow_mode 0
  set-option global rainbow_check_templates Y
}

cork kak-replace-mode "https://github.com/raiguard/kak-replace-mode" %{
  map global normal <a-r> ":enter-replace-mode<ret>"
}

cork kakoune-fandt "https://github.com/listentolist/kakoune-fandt" %{
  require-module fandt
  hook global ModeChange push:.*:next-key\[user.fandt\] %{
    set-face window PrimarySelection black,bright-yellow
    set-face window PrimaryCursor black,white
    set-face window PrimaryCursorEol black,red
    set-face window SecondarySelection black,yellow
    set-face window SecondaryCursor black,cyan
    set-face window SecondaryCursorEol black,red
  }
  hook global ModeChange pop:next-key\[user.fandt\]:.* %{
    unset-face window PrimarySelection
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
    unset-face window SecondarySelection
    unset-face window SecondaryCursor
    unset-face window SecondaryCursorEol
  }
}

cork kakoune-focus "https://github.com/caksoylar/kakoune-focus" %{
  map global user <space> ': focus-toggle<ret>' -docstring "toggle selections focus"
}

cork kakoune-gdb "https://github.com/occivink/kakoune-gdb" %{
  define-command custom-gdb-session-connect %{
    gdb-session-connect
    osc-yank "new-ui mi3 %opt{gdb_dir}/pty"
    gdb-enable-autojump
  }
  define-command custom-gdb-session-new %{
    gdb-session-new
    gdb-enable-autojump
    trigger-user-hook GDBPostInit
  }
  map global normal <F5> ":custom-gdb-session-new<ret>" -docstring "new GDB session"
  map global normal <s-F5> ":custom-gdb-session-connect<ret>" -docstring "connect to GDB session"
  map global normal <F9> ":gdb-toggle-breakpoint<ret>" -docstring "GDB toggle breakpoint"
  map global normal <F10> ":gdb-next<ret>" -docstring "GDB next"
  map global normal <F11> ":gdb-step<ret>" -docstring "GDB step"
  map global normal <F12> ":gdb-continue<ret>" -docstring "GDB continue"
}

cork grep-expand "https://github.com/JacobTravers/grep-expand.kak"

cork kakoune-grep-write "https://github.com/JacobTravers/kakoune-grep-write" %{
  hook global WinSetOption filetype=(grep|lsp-goto) %{
    alias buffer w grep-write
  }
}

cork kakoune-snippets "https://github.com/CharlesGueunet/kakoune-snippets"

cork kakoune-sort-selections "https://github.com/occivink/kakoune-sort-selections"

cork kakoune-state-save "https://gitlab.com/Screwtapello/kakoune-state-save"

cork pmanage.kak "https://github.com/andreyorst/pmanage.kak"

cork smarttab.kak "https://github.com/andreyorst/smarttab.kak"

# --------------------------------------------------
# GENERAL

# Color scheme
colorscheme one-darker-16

trigger-user-hook ColorschemeLoaded
set-face global Ruler StatusLine
# Highlighters
add-highlighter global/ number-lines -relative -separator " " -hlcursor
add-highlighter global/ show-matching

# UI settings
set-option global ui_options terminal_assistant=off terminal_set_title=false
set-option global startup_info_version 10000000000000 # Don't show changelog
set-option global scrolloff 5,5

# Auto-reload please
set-option global autoreload yes

# Use ripgrep instead of grep
set-option global grepcmd 'rg -Hn --no-heading --sort path --vimgrep'

# Conveniently edit config
define-command edit-kakrc %{ e ~/.config/kak/kakrc }
define-command edit-lsp %{ e ~/.config/kak-lsp/kak-lsp.toml }

# Conveniently close all buffers
define-command delete-all-buffers -docstring "delete all buffers" %{
  evaluate-commands %sh{
  eval "set -- $kak_quoted_buflist"
  while [ $# -gt 0 ]; do
    echo "try %{ delete-buffer '$1' } catch %{ echo -markup '{Error}Not all buffers were closed' }"
    shift
  done
  }
}
define-command delete-all-buffers-force -docstring "forcibly delete all buffers" %{
  evaluate-commands %sh{
  eval "set -- $kak_quoted_buflist"
  while [ $# -gt 0 ]; do
    echo "try %{ delete-buffer! '$1' } catch %{ echo -markup '{Error}Not all buffers were closed' }"
    shift
  done
  }
}
define-command write-delete-buffer -docstring "write current buffer then delete it." %{
  write
  delete-buffer
}
# C for 'close'
alias global c delete-buffer
alias global c! delete-buffer!
alias global ca delete-all-buffers
alias global ca! delete-all-buffers-force
alias global wc write-delete-buffer

# Convenient wrap highlighter
define-command addwrap %{
  add-highlighter window/wrap wrap -word -indent
}

# Remove trailing whitespace on save
hook -group auto-trim-whitespace global BufWritePre .* %{ try %{ execute-keys -draft \%s\h+$<ret>d } }

# Automatically parse modelines
hook global BufOpenFile .* modeline-parse

# Add extra sway commands
hook global ModuleLoaded sway %{
  declare-option str foot_app_id foot
  set-option global termcmd "foot -a %opt{foot_app_id} sh -c"
  hook global WinSetOption foot_app_id=.* %{
    set-option window termcmd "foot -a %opt{foot_app_id} sh -c"
  }
  define-command -params .. terminal-floating %{
    set-option window foot_app_id "foot.floating"
    terminal %arg{@}
    set-option window foot_app_id foot
  }
  define-command -params .. -command-completion splith %{
    nop %sh{ swaymsg splith }
    new %arg{@}
  }
  define-command -params .. -command-completion splitv %{
    nop %sh{ swaymsg splitv }
    new %arg{@}
  }
}

# # Supertab - completion and snippet jumping
# declare-option bool in_snippet false
# hook global WinSetOption snippets_placeholder_groups=.* %{ evaluate-commands %sh{
#   eval set -- "$kak_quoted_opt_snippets_placeholder_groups"
#   if [ $# = 0 ]; then
#     printf %s\\n "
#       set-option window in_snippet false
#       unmap window insert <tab> '<a-;>: snippets-select-next-placeholders<ret>'
#     "
#   else
#     printf %s\\n "
#       set-option window in_snippet true
#       map window insert <tab> '<a-;>: snippets-select-next-placeholders<ret>'
#     "
#   fi
# }}
# hook global InsertCompletionShow .* %{ evaluate-commands %sh{
#   if [ "$kak_opt_in_snippet" = false ]; then
#     printf %s\\n "
#       map window insert <tab> <c-n>
#       map window insert <s-tab> <c-p>
#     "
#   fi
# }}

hook global InsertCompletionShow .* %{
  map window insert <tab> <c-n>
  map window insert <s-tab> <c-p>
}
hook global InsertCompletionHide .* %{
  unmap window insert <tab> <c-n>
  unmap window insert <s-tab> <c-p>
}

# --------------------------------------------------
# FILETYPE HOOKS

# Default window settings
hook global WinCreate .* %{
  expandtab
  set-option window tabstop 2
  set-option window softtabstop 2
  set-option window indentwidth 2

  # Show and automatically update git diff on write
  evaluate-commands %sh{
    branch=$(git -C "${kak_buffile%/*}" rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [ -n "$branch" ]; then
      printf %s\\n "
        git show-diff
        hook window BufWritePost .* %{ git update-diff }
        hook window BufReload .* %{ git update-diff }
      "
    fi
  }
}

# Generic
hook global WinSetOption filetype=(css|go|scss|zig) %{
  lsp-init
  rainbow-enable-window
}
hook global WinSetOption filetype=(fish|i3|kak|sh|toml|fastbuild) %{
  rainbow-enable-window
}

hook global WinSetOption filetype=(c|cpp) %{
  lsp-init
  rainbow-enable-window

  map global user a ":clangd-switch-source-header<ret>"

  # Better highlighting
  add-highlighter -override "shared/%opt{filetype}/code/operators" regex (\+|-|\*|&|=|\\|\?|%|\^|\|-|!|\||->|<|>|\^|/|~|\[|\]) 0:operator
  add-highlighter -override "shared/%opt{filetype}/code/function_call" regex \b([a-zA-Z0-9_]*)\( 1:function
  add-highlighter -override "shared/%opt{filetype}/code/constant" regex \b([A-Z0-9_]*)\b 1:value
}

hook global WinCreate (.*/|^)changelog\.txt %{
  try %{
    execute-keys -draft ggxs---------------------------------------------------------------------------------------------------<ret>
    set-option window filetype factorio-changelog
  }
  evaluate-commands %sh{
    # Factorio mods will have an info.json in the same directory
    if [ -f "${kak_hook_param_capture_1}info.json" ] || [ "$kak_hook_param" = "data/changelog.txt" ]; then
      echo "set-option buffer filetype factorio-changelog"
    fi
  }
}
hook global WinSetOption filetype=factorio-changelog %{
  lsp-init
  # Highlighters
  add-highlighter window/changelog_date regex ^(Date):\s(.*?)$ 1:type 2:function
  add-highlighter window/changelog_entry regex ^(\s\s)*(-)\s(.*?)$ 2:value 3:string
  add-highlighter window/changelog_keyword regex ^\s*(Balancing|Bugfixes|Changes|Features|Gui|Info|Optimizations): 1:type
  add-highlighter window/changelog_separator regex ^-+$ 0:keyword
  add-highlighter window/changelog_version regex ^(Version):\s(\d+\.\d+\.\d+)$ 1:type 2:value
}

hook global WinCreate (.*locale/.*/.*\.cfg) %{
  set-option buffer filetype factorio-locale
}
hook global WinSetOption filetype=factorio-locale %{
  lsp-init
  # Highlighters
  require-module conf
  add-highlighter window/conf ref conf
  add-highlighter window/locale_macro regex __[^\n]*?__ 0:meta
  add-highlighter window/locale_rich_text regex \[(achievement|armor|color|entity|fluid|font|gps|item|item-group|recipe|special-item|technology|tile|tooltip|train|train-stop|virtual-signal)=.*?\] 0:function
  add-highlighter window/locale_rich_text_close regex \[/(achievement|armor|color|entity|fluid|font|gps|item|item-group|recipe|special-item|technology|tile|tooltip|train|train-stop|virtual-signal)\] 0:function
}

hook global WinSetOption filetype=(git-commit|mail) %{
  set-option window autowrap_column 72
  set-option window autowrap_format_paragraph true
  autowrap-enable
}

hook global WinSetOption filetype=go %{
  noexpandtab
  set-option window indentwidth 0
  add-highlighter window/ column 81 Ruler

  hook window BufWritePre .* lsp-formatting-sync

  map window user a :go-alternative-file<ret> -docstring "alternative file"
}

hook global WinSetOption filetype=hare %{
  # lsp-init
  rainbow-enable-window

  noexpandtab
  set-option window tabstop 8
  set-option window softtabstop 0
  set-option window indentwidth 0

  add-highlighter window/ruler column 81 Ruler
}

hook global WinSetOption filetype=java %{
  lsp-init
  rainbow-enable-window

  hook global BufWritePre .*\.java lsp-formatting-sync

  set-option window tabstop 4
  set-option window softtabstop 4
  set-option window indentwidth 4

  add-highlighter -override shared/java/code/operator regex (=|==|&&|\|\||\+|-|/|\*|\+=|-=|\*=|/=|!|<=|>=|<|>) 1:operator
}

hook global WinSetOption filetype=json %{
  lsp-init
  rainbow-enable-window
  set-option window formatcmd 'jq .'
}

hook global WinSetOption filetype=latex %{
  lsp-init
  rainbow-enable-window

  add-highlighter window/ruler column 81 Ruler

  hook window BufWritePre .* lsp-formatting-sync
  hook window BufWritePost .* texlab-build
  evaluate-commands %sh{ echo "pstart 'zathura ${kak_buffile%.tex}.pdf'" }

  define-command create-figure %{
    prompt name: %{
      set-register f %sh{
        inkscape-figures create "$kak_text" "$(dirname $kak_buffile)/figures"
      }
      execute-keys '"fR"zZ'
      execute-keys '2<a-f>{lt}'
      nop %sh{
        ( inkscape "$(dirname $kak_buffile)/figures/$kak_selection.svg" 2>&1 & ) > /dev/null 2>&1 < /dev/null
      }
      execute-keys '"zz'
    }
  }

  define-command edit-figures %{ nop %sh{
    ( inkscape-figures edit "$(dirname $kak_buffile)/figures" 2>&1 & ) > /dev/null 2>&1 < /dev/null
  }}

  declare-user-mode figures
  map global user f ": enter-user-mode figures<ret>" -docstring "figures..."
  map global figures c ": create-figure<ret>" -docstring "create"
  map global figures e ": edit-figures<ret>" -docstring "edit"

  set-option -add global snippets \
  Fraction // %{snippets-insert "\frac{$1}{$2} $3"} \
  Sum \bsm\s %{snippets-insert "\sum{$1 \to $2} $3"} \
  Partial \bpD\b %{snippets-insert "\partial "}
}

hook global WinSetOption filetype=lua %{
  lsp-init
  rainbow-enable-window

  set-option window formatcmd "stylua -"

  # Highlight EmmyLua annotations
  add-highlighter window/emmylua_direct regex "---\s*(@(?:alias|as|class|enum|generic|return|type))\s+([^\n]*)" 1:attribute 2:type
  add-highlighter window/emmylua_labeled regex "---\s*(@(?:alias|cast|field|param))\s+([a-zA-Z0-9_]*) ([^\n]*)" 1:attribute 2:variable 3:type
  add-highlighter window/emmylua_enum_variant regex '---\s*\|\s*("[^\n]*")' 1:string

  set-option -add global snippets Annotation '-`' %{
    snippets-insert "--- @"
    # Remove the extra tick inserted by auto-pairs
    execute-keys d
  }
}

hook global WinSetOption filetype=makefile %{
  noexpandtab
  set-option window indentwidth 0
}

hook global WinSetOption filetype=markdown %{
  # lsp-init
  rainbow-enable-window
  # add-highlighter shared/markdown/inline/equation region -match-capture \$+ \$+ fill meta
  add-highlighter window/date regex ^\h*>!.*?$ 0:type
}

hook global WinSetOption filetype=python %{
  lsp-init
  rainbow-enable-window

  set-option window tabstop 4
  set-option window softtabstop 4
  set-option window indentwidth 4

  set-option window formatcmd "autopep8 -"
  # hook window BufWritePre .* format
  add-highlighter shared/python/code/functioncall regex '\b([a-zA-Z0-9_]*)\h*\(' 1:function
}

hook global WinSetOption filetype=rust %{
  lsp-init
  rainbow-enable-window
  lsp-inlay-hints-enable window

  # Format on save
  hook window BufWritePre .* lsp-formatting-sync
}

# TODO: Create a kak plugin for this filetype
hook global BufCreate .+\.scd %{
  set-option buffer filetype scdoc
}
hook global WinSetOption filetype=scdoc %{
  noexpandtab
  autowrap-enable
  set-option window autowrap_format_paragraph true

  # Highlighting
  add-highlighter window/scdoc_header regex "^##?\s*.*?$" 0:+b
  add-highlighter window/scdoc_bold regex "\*.*?\*" 0:+b
  add-highlighter window/scdoc_underline regex "\b_.*?_\b" 0:+u
}

hook global WinSetOption filetype=typescript %{
  lsp-init
  rainbow-enable-window

  # Format on save
  hook window BufWritePre .* lsp-formatting-sync
}

hook global WinSetOption filetype=yaml %{
  rainbow-enable-window
}

hook global WinSetOption filetype=zig %{
  set-option window tabstop 4
  set-option window softtabstop 4
  set-option window indentwidth 4
}

hook global ModuleLoaded zig %{
  add-highlighter shared/zig/code/function_call regex \b([a-zA-Z0-9]+)\( 1:function
  add-highlighter shared/zig/code/builtin_function regex (@[a-zA-Z0-9]+)\( 1:builtin
}

# --------------------------------------------------
# GENERAL MAPPINGS

# NORMAL

# Comment
map global normal "#" ":comment-line<ret>"
map global normal "<a-#>" ":comment-block<ret>"

# Go to file (basic fuzzy finder)
map global goto f '<esc>:prompt -shell-script-candidates %{ fd --type f --hidden } file: %{ edit %val{text} }<ret>' -docstring "file"
# Or with fzf
map global user f ':terminal-floating fzf-pick "%val{client}" "%val{session}"<ret>' -docstring "pick file"
map global user / ':terminal-floating fzf-search "%val{client}" "%val{session}"<ret>' -docstring "fuzzy search"

# Go to buffer
map global goto "b" '<esc>:prompt -buffer-completion buffer: %{ buffer %val{text} }<ret>' -docstring "buffer"

# Pick file with NNN
map global normal <minus> ':terminal-floating nnn-pick "%val{buffile}" "%val{client}" "%val{session}"<ret>'

# Pipe primary selection to command and echo output to statusline
map global normal <a-$> ':prompt -shell-completion echo-pipe: %{ echo %sh{ printf "%s" "$kak_selection" | $kak_text }}<ret>'

# Search case-insensitive by default
map global normal "/" "/(?i)"
map global normal "?" "?(?i)"
map global normal "<a-/>" "<a-/>(?i)"
map global normal "<a-?>" "<a-?>(?i)"

# Always select entire lines
map global normal J "Jx"
map global normal K "Kx"

# Select inner line
map global normal X x_

# Select all occurances of current selection in file
map global normal "<a-*>" "*<percent>s<ret>" -docstring "Select all matching in file"

map global normal <c-y> ":osc-yank<ret>"
define-command -hidden osc-yank -params .. \
-docstring "yank argument or selections to terminal clipboard using OSC 52" %{
  nop %sh{
    if [ $# = 0 ]; then
      eval set -- "$kak_quoted_selections"
    fi
    copy=$1
    shift
    for sel; do
      copy=$(printf '%s\n%s' "$copy" "$sel")
    done
    encoded=$(printf %s "$copy" | base64 | tr -d '\n')
    printf "\e]52;;%s\e\\" "$encoded" >"/proc/$kak_client_pid/fd/0"
  }
}

# Jumps centered please
map global normal <c-o> <c-o>vv
map global normal <c-i> <c-i>vv

# Convenient popup terminal
map global normal '<c-;>' ':terminal-floating %sh{ echo "$SHELL" }<ret>'

# INSERT

# Delete words in insert mode
map global insert <c-w> "<esc>hBdi"

# USER

map global user n ':new edit %val{bufname}<ret>' -docstring "new window"

# Sort
declare-user-mode sort
map global user s ":enter-user-mode sort<ret>" -docstring "sort..."
map global sort l "|sort<ret>" -docstring "lines"
map global sort s "<esc>:sort-selections<ret>" -docstring "selections"

# Toggle
declare-user-mode toggle
map global user t ":enter-user-mode toggle<ret>" -docstring "toggle..."
map global toggle i ':show-tab-info<ret>' -docstring "tab settings"
define-command show-tab-info %{
  info -title "tab settings" "tabstop: %opt{tabstop}
softtabstop: %opt{softtabstop}
indentwidth: %opt{indentwidth}"
}
map global toggle s ': show-session-info<ret>' -docstring "session info"
define-command -hidden show-session-info %{
  info -title "session info" "%val{client}/%val{session}
%sh{pwd}"
}

# Wrap paragraphs
map global user w ": wrap-paragraph<ret>" -docstring "wrap paragraph"
define-command wrap-paragraph %{
  execute-keys "<a-i>p<a-j>|fold -s -w %opt{autowrap_column}<ret>|sed 's/\s*$//g'<ret><esc>"
}

# Git
declare-user-mode git
map global user g ":enter-user-mode git<ret>" -docstring "git..."
map global git b ":git blame<ret>" -docstring "blame"
map global git B ":git hide-blame<ret>" -docstring "hide blame"
map global git d ":git diff<ret>" -docstring "diff"
map global git g ":terminal-floating lazygit<ret>" -docstring "lazygit"
map global git f ":lazygit-current-file<ret>" -docstring "file history"
define-command lazygit-current-file %{
  terminal-floating lazygit -f %val{buffile}
}
map global git l ":lazygit-current-line<ret>" -docstring "line history"
define-command lazygit-current-line %{
  terminal-floating lazygit -f "-L%val{cursor_line},+1:%val{buffile}"
}

# Spell
declare-user-mode spell
map global user p ":enter-user-mode spell<ret>" -docstring "spell..."
map global spell a ":spell-add<ret>" -docstring "add"
map global spell c ":spell-clear<ret>" -docstring "clear"
map global spell p ":spell<ret>" -docstring "spell"
map global spell r ":spell-replace<ret>" -docstring "replace"
map global spell ] ":spell-next<ret>" -docstring "next"

# Navigation
declare-user-mode next-location
map global user ] ":enter-user-mode next-location<ret>" -docstring "next..."
map global next-location d ":lsp-next-location *diagnostics*<ret>" -docstring "diagnostics"
map global next-location g ":lsp-next-location *goto*<ret>" -docstring "goto"
map global next-location / ":lsp-next-location *grep*<ret>" -docstring "grep"
map global next-location m ":lsp-next-location *make*<ret>" -docstring "make"
map global next-location p ":lsp-next-location *spell*<ret>" -docstring "spell"

declare-user-mode previous-location
map global user [ ":enter-user-mode previous-location<ret>" -docstring "previous..."
map global previous-location d ":lsp-previous-location *diagnostics*<ret>" -docstring "diagnostics"
map global previous-location g ":lsp-previous-location *goto*<ret>" -docstring "goto"
map global previous-location / ":lsp-previous-location *grep*<ret>" -docstring "grep"
map global previous-location m ":lsp-previous-location *make*<ret>" -docstring "make"
map global previous-location p ":lsp-previous-location *spell*<ret>" -docstring "spell"

# IDE
declare-user-mode ide
map global user i ":enter-user-mode ide<ret>"
map global ide t ':set-option global toolsclient %val{client}<ret>' -docstring "set toolsclient"
map global ide j ':set-option global jumpclient %val{client}<ret>' -docstring "set jumpclient"
map global ide d ':set-option global docsclient %val{client}<ret>' -docstring "set docsclient"

# Other
map global user e ":edit -scratch<ret>" -docstring "scratch buffer"

# --------------------------------------------------
# LSP

set-option global lsp_auto_highlight_references true
set-option global lsp_hover_max_lines 1000

define-command lsp-restart -docstring "Restart kak-lsp session" %{ lsp-stop; lsp-start }

define-command lsp-init -docstring "Enable LSP with default settings" %{
  map window goto m "<esc><c-s>:lsp-implementation<ret>" -docstring "implementations"
  map window user l ":enter-user-mode lsp<ret>" -docstring "lsp..."
  map window normal <c-h> ":lsp-hover<ret>"
  map window normal <c-a-h> ":lsp-hover-buffer<ret>"
  map window normal <c-a> ":lsp-code-actions<ret>"
  map window normal <c-r> ":lsp-rename-prompt<ret>"
  map window normal <c-e> ":lsp-diagnostics<ret>"
  map global lsp m ":lsp-show-message-request-next<ret>"
  map window goto d "<esc><c-s>:lsp-definition<ret>"
  map window goto r "<esc><c-s>:lsp-references<ret>"
  map window goto y "<esc><c-s>:lsp-type-definition<ret>"
  lsp-inlay-diagnostics-enable window

  echo -debug "Enabling LSP for filetype %opt{filetype}"
  lsp-enable-window
  # lsp-auto-signature-help-enable
  set-option window lsp_enabled true

  # hook -group lsp window NormalIdle .* lsp-semantic-tokens
  # hook -group lsp window InsertKey .* lsp-semantic-tokens
  # hook -group lsp window BufReload .* lsp-semantic-tokens
}

hook global KakEnd .* lsp-exit

# Custom status line

declare-option bool lsp_enabled false
declare-option -hidden str lsp_modeline_progress ""
define-command -hidden -params 6 -override lsp-handle-progress %{
  set-option global lsp_modeline_progress %sh{
    if ! "$6"; then
      echo "$2${5:+" ($5%)"}${4:+": $4"}"
    fi
  }
}

# --------------------------------------------------
# TODO

# Highlight TODO and other related comment tags
hook global WinSetOption comment_line=(.*) %{
  add-highlighter -override window/todo regex "\Q%val{hook_param_capture_1}\E\h*(TODO(?: raiguard)?:)[^\n]*" 1:string
  add-highlighter -override window/fixme regex "\Q%val{hook_param_capture_1}\E\h*((?:BUG|FIXME|TEMPORARY|XXX)(?: raiguard)?:)[^\n]*" 1:Error
  add-highlighter -override window/note regex "\Q%val{hook_param_capture_1}\E\h*(NOTE:)[^\n]*" 1:function
}
# Show list of TODOs in the current project
map global toggle t ": grep '(BUG|FIXME|TODO|TEMPORARY)( raiguard)?:'<ret>" -docstring "TODOs"

# --------------------------------------------------
# MODELINE

# Git branch
declare-option -hidden str modeline_git_branch
hook global WinDisplay .* %{
  set-option window modeline_git_branch %sh{
    branch=$(git -C "${kak_buffile%/*}" rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [ -n "$branch" ]; then
      printf "$branch "
    fi
  }
}

set-option global modelinefmt '%opt{lsp_modeline_message_requests} %opt{lsp_modeline_progress} {+r@Error}%opt{gdb_indicator}{StatusLine}{string}%opt{modeline_git_branch}{type}%sh{ [ -n "$kak_opt_filetype" ] && echo "$kak_opt_filetype " }{default}%val{bufname}{{context_info}}{default} {{mode_info}} {meta}%val{cursor_line}:%val{cursor_char_column}'

# --------------------------------------------------
# OTHER

# Factorio
declare-option str frun_pid
define-command -params .. \
    -docstring %{
        frun [<arguments>]: frun utility wrapper
        All the optional arguments are forwarded to the frun utility
     } frun %{ evaluate-commands %sh{
     output=$(mktemp -d "${TMPDIR:-/tmp}"/kak.XXXXXXXX)/fifo
     mkfifo ${output}
     ( frun "$@" > ${output} 2>&1 & ) > /dev/null 2>&1 < /dev/null

     printf %s\\n "evaluate-commands -try-client '$kak_opt_toolsclient' %{
               edit! -fifo ${output} -scroll *frun*
               set-option buffer filetype make
               hook -always -once buffer BufCloseFifo .* %{ nop %sh{ rm -r $(dirname ${output}) } }
               set-option global frun_pid $$
           }"
}}

# Quickly test faces
declare-option range-specs test_ranges
define-command add-test-face -params 2 %{
  set-option -add window test_ranges "%val{selection_desc}|%arg{1}"
  add-highlighter -override window/test_ranges ranges test_ranges
}

# Load local configuration
evaluate-commands %sh{
  if [ -f ".kakrc" ]; then
    echo "source ./.kakrc"
  fi
}

# # EXPERIMENT
# # Always show a "symbol outline" on the left and synchronously keep it updated with the current viewport

# declare-option str-list lsp_symbols_outline "{attribute}󰏗 {type}MyObject::method1" "{operator}# {Default}MyObject::field1"
# declare-option line-specs lsp_symbols_outline_line_specs
# hook global WinCreate .* %{
#   add-highlighter window/lsp_symbols_outline flag-lines Default lsp_symbols_outline_line_specs
#   hook window BufWritePost .* update-lsp-symbols-outline
#   hook window RawKey .* update-lsp-symbols-outline
#   hook window WinDisplay .* update-lsp-symbols-outline
#   hook window WinResize .* update-lsp-symbols-outline
# }

# define-command update-lsp-symbols-outline %{ evaluate-commands %sh{
#   start_line=$(awk '{ print $1+1 }' <<< $kak_window_range)
#   eval set -- "$kak_quoted_opt_lsp_symbols_outline"
#   output="set-option window lsp_symbols_outline_line_specs $kak_timestamp"
#   while [ $# -gt 0 ]; do
#     output="$output %{$start_line|$1}"
#     shift
#     start_line=$((start_line+1))
#   done
#   echo $output
# }}
