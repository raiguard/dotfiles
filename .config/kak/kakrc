# ========================================
# PLUG.KAK

declare-option -docstring "plug.kak's directory" str plugkakdir "%val{config}/plugins/plug.kak"
declare-option -docstring "plug.kak's main script" str plugkak "%opt{plugkakdir}/rc/plug.kak"

try %{
    source "%opt{plugkak}"
} catch %sh{
    if [ ! -d "$kak_opt_plugkakdir" ]; then
        git clone https://github.com/robertmeta/plug.kak.git "$kak_opt_plugkakdir"
        echo "source '%opt{plugkak}"
    fi
}
plug "andreyorst/plug.kak" noload

# ========================================
# PLUGINS

plug "alexherbo2/move-line.kak" %{ require-module move-line }
plug "alexherbo2/search-highlighter.kak" %{
    require-module search-highlighter
    face global Search default,rgba:e5c07b40
    search-highlighter-enable
}
plug "andreyorst/smarttab.kak"
plug "crizan/kak-rainbower" config %{
    set global rainbow_mode 0
    set global rainbow_colors "rgb:ffd700" "rgb:da70d6" "rgb:87cefa"
    set global rainbow_check_templates Y
}
plug "delapouite/kakoune-mirror"
plug "delapouite/kakoune-palette"
plug "delapouite/kakoune-text-objects" %{ text-object-map }
plug "dgmulf/local-kakrc" config %{ set global source_local_kakrc true }
plug "jordan-yee/kakoune-git-mode"
plug "kak-lsp/kak-lsp" do %{ cargo install --locked --force --path . } config %{
    set global lsp_diagnostic_line_error_sign 'E'
    # Workaround for the lack of a proper LineFlagWarnings face
    set global lsp_diagnostic_line_warning_sign '{LineFlagWarnings}W'

    set global lsp_hover_anchor true

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

    define-command -hidden lsp-init -docstring "enable lsp and set up generic hooks" %{
        echo -debug "Enabling LSP for filetype %opt{filetype}"
        lsp-enable-window
        set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

        set window lsp_auto_highlight_references true

        # Enable inlay and inline diagnostics in normal mode, but disable in insert mode
        lsp-inlay-diagnostics-enable window
        hook window ModeChange push:.*:insert %{
            lsp-inlay-diagnostics-disable window
            lsp-inline-diagnostics-disable window
        }
        hook window ModeChange pop:insert:.* %{
            lsp-inlay-diagnostics-enable window
            lsp-inline-diagnostics-enable window
        }

        # Enable auto-hover in insert mode
        lsp-auto-hover-insert-mode-enable

        # Function signature help in status bar
        lsp-auto-signature-help-enable

        # Semantic tokens
        hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
        hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
        hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
        hook -once -always window WinSetOption filetype=.* %{
            remove-hooks window semantic-tokens
        }
    }

    hook global KakEnd .* lsp-exit
}
plug "lePerdu/kakboard"
plug "occivink/kakoune-phantom-selection"
plug "occivink/kakoune-vertical-selection"
plug "raiguard/one.kak" theme

# ========================================
# GENERAL SETTINGS

# Highlighters
addhl global/ number-lines -relative -hlcursor -separator " ▏ " -min-digits 4
addhl global/ show-matching
# addhl global/ show-whitespaces -tab "▏" -lf " " -nbsp "⋅" -spc " "

# RIP clippy and titles
set global ui_options ncurses_assistant=off ncurses_set_title=false

# Keep cursor away from the edges
set global scrolloff 5,5

# Auto-reload please!
set global autoreload yes

# Custom status bar format
set-option global modelinefmt "{StatusLineValue}%%val{bufname}{StatusLineValue}:%%val{cursor_line}:%%val{cursor_char_column}{StatusLine} %%sh{expr $kak_cursor_line \* 100 / $kak_buf_line_count}%%%%{{context_info}} {{mode_info}} {keyword}%%val{client}{StatusLineValue} {enum}%%val{session}{StatusLine}"

# ========================================
# KEYBINDINGS

# Comment
map global normal "#" ": comment-line<ret>"
map global normal "<a-#>" ": comment-block<ret>"

# Math prompt
map global normal "=" ': prompt math: %{exec "a%val{text}<lt>esc>|bc<lt>ret>"}<ret>'

# Go to file (basic fuzzy finder)
map global goto "f" '<esc>: prompt -shell-script-candidates %{ rg --files --hidden } file: %{ edit %val{text} }<ret>' -docstring "file"

# Go to buffer
map global goto "b" '<esc> : prompt -buffer-completion buffer: %{ buffer %val{text} }<ret>' -docstring "buffer"

# Jumps centered please
map global normal "<c-i>" "<c-i>vv"
map global normal "<c-o>" "<c-o>vv"

# Search results centered please
map global normal "n" "nvv"
map global normal "N" "Nvv"
map global normal "<a-n>" "<a-n>vv"
map global normal "<a-N>" "<a-N>vv"

# Swap user mode and clear selection keys
map global normal "<space>" ","
map global normal "," "<space>"
map global normal "<a-,>" "<a-space>"

# Less awkward keybind for outer object
map global normal "<a-o>" "<a-a>"

# Search case-insensitive by default
map global normal "/" "/(?i)"
map global normal "?" "?(?i)"
map global normal "<a-/>" "<a-/>(?i)"
map global normal "<a-?>" "<a-?>(?i)"

# Move lines up/down
# This is a hack combined with kitty (see .config/kitty/kitty.conf) to allow use of reserved key combos that I don't care about
map global normal "ⓙ" ": move-line-below<ret>"
map global normal "<c-k>" ": move-line-above<ret>"

# Always select entire lines
map global normal "J" "J<a-x>"
map global normal "K" "K<a-x>"

# Open lazygit
# TODO: use proper command
map global git "o" ": kitty-terminal-tab lazygit<ret>" -docstring "open..."

# User mode keybinds
map global normal "'" ": enter-user-mode -lock mirror<ret>"
map global user "c" ": enter-user-mode comment<ret>" -docstring "comment..."
map global user "g" ": enter-user-mode git<ret>" -docstring "git..."
map global user "l" ": enter-user-mode lsp<ret>" -docstring "lsp..."
map global user "p" ": enter-user-mode phantom-selection<ret>" -docstring "phantom selection..."

# kak-lsp shortcuts
map global normal "<c-h>" ": lsp-hover<ret>"

# ========================================
# CUSTOM MODES

# Sneak mode placeholders to train my muscle memory
map global normal "x" ": echo 'ENTER SNEAK MODE'<ret>"
map global normal "<s-x>" ": echo 'ENTER SNEAK MODE (EXTEND)'<ret>"
map global normal "<a-x>" ": echo 'ENTER SNEAK MODE (REVERSE)'<ret>"
map global normal "<a-s-x>" ": echo 'ENTER SNEAK MODE (REVERSE) (EXTEND)'<ret>"
# Remap expand-to-full-lines key
map global normal "<c-x>" "<a-x>"

# Phantom selection mode
declare-user-mode phantom-selection
map global phantom-selection "a" ": phantom-selection-add-selection<ret>" -docstring "add selection"
map global phantom-selection "s" ": phantom-selection-select-all<ret>" -docstring "select all"
map global phantom-selection "c" ": phantom-selection-clear<ret>" -docstring "clear"
map global phantom-selection "n" ": phantom-selection-iterate-next<ret>vv" -docstring "next"
map global phantom-selection "p" ": phantom-selection-iterate-prev<ret>vv" -docstring "previous"

# ========================================
# CUSTOM COMMANDS

def edit-kakrc %{ e ~/.config/kak/kakrc }

# ========================================
# FILETYPE HOOKS

# default
hook global WinCreate .* %{
    expandtab
    set window tabstop 4
    set window softtabstop 4
    set window indentwidth 4

    # enable plugins
    # auto-pairs-enable
    rainbow-enable-window
    kakboard-enable

    # Show and automatically update git diff on write
    git show-diff
    hook window BufWritePost .* %{ git update-diff }
    hook window BufReload .* %{ git update-diff }
}

# lua
hook global WinSetOption filetype=lua %{
    lsp-init

    set window tabstop 2
    set window softtabstop 2
    set window indentwidth 2

    addhl window/ column 121 Ruler
}

# rust
hook global WinSetOption filetype=rust %{
    lsp-init

    # Format on save
    hook window BufWritePre .* lsp-formatting-sync
    # Clippy
    set window lsp_server_configuration rust.clippy_preference="on"

    # Inlay hints
    hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
    hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
    # hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
    hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window rust-inlay-hints
    }
}

# ========================================
# OTHER HOOKS

# Remove trailing whitespace on save
hook global BufWritePre .* %{ try %{ execute-keys -draft \%s\h+$<ret>d } }

# Auto complete with tab
hook global InsertCompletionShow .* %{
    map window insert <tab> <c-n>
    map window insert <s-tab> <c-p>
}
hook global InsertCompletionHide .* %{
    map window insert <tab> <tab>
    map window insert <s-tab> <s-tab>
}

# ========================================
# SCRIPTS

declare-option -hidden str scripts "%val{config}/scripts"

source "%opt{scripts}/fandt.kak"
require-module "fandt"
source "%opt{scripts}/git-branch.kak"
source "%opt{scripts}/lua.kak"

# source "%opt{scripts}/highlighter-demos.kak"

# ========================================
# COLOR SCHEME
# Set this last for compatibility reasons

colorscheme one-darker
# source "~/dev/projects/personal/one.kak/one-darker.kak"
