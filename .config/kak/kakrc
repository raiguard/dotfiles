# ========================================
# PLUG.KAK

decl -hidden str plugkakdir "%val{config}/plugins/plug.kak"
decl -hidden str plugkak "%opt{plugkakdir}/rc/plug.kak"
try %{
    source "%opt{plugkak}"
} catch %sh{
    if [ ! -d "$kak_opt_plugkakdir" ]; then
        git clone https://github.com/robertmeta/plug.kak.git "$kak_opt_plugkakdir"
        echo "source '%opt{plugkak}"
    fi
}
plug "andreyorst/plug.kak" noload

# ========================================
# PLUGINS

# kakoune.cr (coderunner)
evaluate-commands %sh{
    kcr init kakoune
}

plug "alexherbo2/auto-pairs.kak" %{
    require-module auto-pairs
    auto-pairs-enable
}
plug "alexherbo2/move-line.kak" %{ require-module move-line }
plug "alexherbo2/phantom.kak" %{
    require-module phantom
    phantom-enable
    phantom-add-mappings
    map global normal "<c-n>" ": phantom-iterate-next-selection<ret>"
    map global normal "<c-p>" ": phantom-iterate-previous-selection<ret>"
}
plug "alexherbo2/search-highlighter.kak" %{
    require-module search-highlighter
    search-highlighter-enable
    face global Search default+du
}
plug "andreyorst/smarttab.kak"
plug "crizan/kak-rainbower" %{
    set global rainbow_mode 0
    set global rainbow_check_templates Y
    # Dark theme:
    set global rainbow_colors "rgb:ffd700" "rgb:da70d6" "rgb:87cefa"
    # Light theme:
    # set global rainbow_colors "rgb:daa520" "rgb:9932cc" "rgb:00bfff"
}
plug "delapouite/kakoune-mirror" %{
    # Use a non-default register to avoid conflicting with phantom.kak
    map global mirror d '"pZ<a-S><a-d>"pz<a-:>H' -docstring 'delete'
}
plug "delapouite/kakoune-palette"
plug "delapouite/kakoune-text-objects"
plug "dgmulf/local-kakrc" config %{ set global source_local_kakrc true }
plug "kak-lsp/kak-lsp" do %{ cargo install --locked --force --path . } config %{
    set global lsp_diagnostic_line_error_sign 'E'
    # Workaround for the lack of a proper LineFlagWarnings face
    set global lsp_diagnostic_line_warning_sign '{LineFlagWarnings}W'

    set global lsp_hover_anchor true

    def lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

    def -hidden lsp-init -docstring "enable lsp and set up generic hooks" %{
        echo -debug "Enabling LSP for filetype %opt{filetype}"
        lsp-enable-window
        set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

        set window lsp_auto_highlight_references true

        # Enable inlay and inline diagnostics in normal mode, but disable in insert mode
        lsp-inlay-diagnostics-enable window
        hook window ModeChange push:.*:insert %{
            lsp-inlay-diagnostics-disable window
            lsp-inline-diagnostics-disable window
        }
        hook window ModeChange pop:insert:.* %{
            lsp-inlay-diagnostics-enable window
            lsp-inline-diagnostics-enable window
        }

        # Function signature help in status bar
        lsp-auto-signature-help-enable

        # Experimental insert mode auto-hover
        lsp-auto-hover-insert-mode-enable

        # Semantic tokens
        hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
        hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
        hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
        hook -once -always window WinSetOption filetype=.* %{
            rmhooks window semantic-tokens
        }
    }

    hook global KakEnd .* lsp-exit
}
plug "lePerdu/kakboard"
plug "occivink/kakoune-find"
plug "occivink/kakoune-sort-selections"
plug "occivink/kakoune-vertical-selection"
plug "raiguard/one.kak" theme
plug "https://gitlab.com/Screwtapello/kakoune-state-save" %{
    hook global KakBegin .* %{
        state-save-reg-load colon
        state-save-reg-load pipe
        state-save-reg-load slash
    }

    hook global KakEnd .* %{
        state-save-reg-save colon
        state-save-reg-save pipe
        state-save-reg-save slash
    }
}

# ========================================
# SCRIPTS

require-module fandt

require-module "git-branch"

require-module todo
todo-enable
todo-add-mapping

# ========================================
# GENERAL SETTINGS

# Color scheme
colorscheme one-darker
# source "~/dev/projects/personal/one.kak/one-light.kak"

# Highlighters
addhl global/ number-lines -relative -hlcursor -separator " ▏ " -min-digits 4
addhl global/ show-matching
addhl global/ show-whitespaces -tab "▏" -lf " " -nbsp "⋅" -spc " "
addhl global/trailing-whitespaces regex "(\h+)$" "1:default,rgba:%opt{darkred}%opt{selectionalpha}"

# RIP clippy and titles
set global ui_options ncurses_assistant=off ncurses_set_title=false

# Keep cursor away from the edges
set global scrolloff 5,5

# Auto-reload please!
set global autoreload yes

# Custom status bar format
set global modelinefmt "{StatusLineValue}%%val{bufname}{StatusLineValue}:%%val{cursor_line}:%%val{cursor_char_column}{StatusLine} %%sh{expr $kak_cursor_line \* 100 / $kak_buf_line_count}%%%%{{context_info}} {{mode_info}} {keyword}%%val{client}{StatusLineValue} {enum}%%val{session}{StatusLine}"

# Use ripgrep instead of grep
set global grepcmd 'rg -Hn --no-heading'

# ========================================
# KEYBINDINGS

# Comment
map global normal "#" ": comment-line<ret>"
map global normal "<a-#>" ": comment-block<ret>"

# Math prompt
map global normal "=" ': prompt math: %{exec "a%val{text}<lt>esc>|bc<lt>ret>"}<ret>'

# Go to file (basic fuzzy finder)
map global goto "f" '<esc>: prompt -shell-script-candidates %{ rg --files } file: %{ edit %val{text} }<ret>' -docstring "file"

# Go to buffer
map global goto "b" '<esc>: prompt -buffer-completion buffer: %{ buffer %val{text} }<ret>' -docstring "buffer"

# View files
map global view "f" "<esc>: terminal-tab nnn<ret>" -docstring "files..."

# View lazygit
map global view "g" "<esc>: terminal-tab lazygit<ret>" -docstring "lazygit..."

# Grep for current selection
map global user "/" ': grep %reg{dot}<ret>' -docstring "grep for selection"

# Jumps centered please
map global normal "<c-i>" "<c-i>vv"
map global normal "<c-o>" "<c-o>vv"

# Search results centered please
map global normal "n" "nvv"
map global normal "N" "Nvv"
map global normal "<a-n>" "<a-n>vv"
map global normal "<a-N>" "<a-N>vv"

# Swap user mode and clear selection keys
map global normal "<space>" ","
map global normal "," "<space>"
map global normal "<a-,>" "<a-space>"

# Less awkward keybind for outer object
map global normal "<a-o>" "<a-a>"

# Search case-insensitive by default
map global normal "/" "/(?i)"
map global normal "?" "?(?i)"
map global normal "<a-/>" "<a-/>(?i)"
map global normal "<a-?>" "<a-?>(?i)"

# Move lines up/down
# This is a hack combined with kitty (see .config/kitty/kitty.conf) to allow use of reserved key combos that I don't care about
map global normal "ⓙ" ": move-line-below<ret>"
map global normal "<c-k>" ": move-line-above<ret>"

# Free alt-movement keys
map global normal "<a-a>" "<a-j>"
map global normal "<a-A>" "<a-J>"
map global normal "<a-m>" "<a-k>"
map global normal "<a-M>" "<a-K>"

# Always select entire lines
map global normal "J" "J<a-x>"
map global normal "K" "K<a-x>"

# Except when I don't want to
map global normal "<a-j>" "J"
map global normal "<a-k>" "K"

# Remap extend-line to inner line
map global normal "X" "<a-i><esc>: text-object-line<ret>"

# Select all occurances of current selection in file
map global normal "<a-*>" "*<percent>s<ret>" -docstring "Select all matching in file"

# User mode keybinds
map global normal "'" ": enter-user-mode -lock mirror<ret>"
map global user "l" ": enter-user-mode lsp<ret>" -docstring "lsp..."
map global user "b" "<a-:><a-;>L: enter-user-mode mirror<ret><a-S><esc>i<ret><esc><space>;" -docstring "break to new line"

# Disable escape to end macro
hook global NormalKey Q %{
    map global normal "<esc>" ""
    hook -always -once global NormalKey Q %{ unmap global normal "<esc>" "" }
}

# ========================================
# CUSTOM MODES

declare-user-mode sort
map global user "s" ": enter-user-mode sort<ret>" -docstring "sort..."
map global sort "e" "<esc>|sort<ret>" -docstring "external"
map global sort "s" "<esc>: sort-selections<ret>" -docstring "selections"

# ========================================
# CUSTOM COMMANDS

def edit-kakrc %{ e ~/.config/kak/kakrc }

def ide -params 0..1 %{
    try %{ rename-session %arg{1} }

    rename-client main
    set global jumpclient main

    new rename-client tools
    set global toolsclient tools

    new rename-client docs
    set global docsclient docs
}

# ========================================
# FILETYPE

# default
hook global WinCreate .* %{
    expandtab
    set window tabstop 4
    set window softtabstop 4
    set window indentwidth 4

    # Enable plugins
    kakboard-enable

    # Show and automatically update git diff on write
    git show-diff
    hook window BufWritePost .* %{ git update-diff }
    hook window BufReload .* %{ git update-diff }
}

hook global WinSetOption filetype=(json|kak|toml) %{
    rainbow-enable-window
}

hook global WinSetOption filetype=lua %{
    # Configure lua language server
    set global lsp_server_configuration 'Lua.diagnostics.disable=["lowercase-global"]'
    set -add global lsp_server_configuration 'Lua.diagnostics.globals=["__DebugAdapter","__Profiler","bit32","commands","data","defines","game","global","localised_print","log","mods","on_error","rcon","remote","rendering","script","serpent","settings","table_size"]'

    lsp-init
    rainbow-enable-window

    set window tabstop 2
    set window softtabstop 2
    set window indentwidth 2

    addhl window/ column 121 Ruler

    set window formatcmd stylua
    hook window BufWritePre .* format
}

hook global WinSetOption filetype=rust %{
    set global lsp_server_configuration 'rust.clippy_reference="off"'
    lsp-init
    rainbow-enable-window

    # Format on save
    hook window BufWritePre .* lsp-formatting-sync
    # Clippy
    # TODO: Doesn't do anything?
    # set window lsp_server_configuration rust.clippy_preference="on"

    # Inlay hints
    hook window -group rust-inlay-hints BufReload .* rust-analyzer-inlay-hints
    hook window -group rust-inlay-hints NormalIdle .* rust-analyzer-inlay-hints
    hook window -group rust-inlay-hints InsertIdle .* rust-analyzer-inlay-hints
    hook -once -always window WinSetOption filetype=.* %{
        rmhooks window rust-inlay-hints
    }
}

hook global WinSetOption filetype=yaml %{
    rainbow-enable-window

    set window tabstop 2
    set window softtabstop 2
    set window indentwidth 2
}

# ========================================
# OTHER HOOKS

# Remove trailing whitespace on save
hook global BufWritePre .* %{ try %{ execute-keys -draft \%s\h+$<ret>d } }

# Auto complete with tab
hook global InsertCompletionShow .* %{
    map window insert "<tab>" "<c-n>"
    map window insert "<s-tab>" "<c-p>"
}
hook global InsertCompletionHide .* %{
    map window insert <tab> <tab>
    map window insert <s-tab> <s-tab>
}
