# ========================================
# PLUG.KAK

decl -hidden str plugkakdir "%val{config}/plugins/plug.kak"
decl -hidden str plugkak "%opt{plugkakdir}/rc/plug.kak"
try %{
    source "%opt{plugkak}"
} catch %sh{
    if [ ! -d "$kak_opt_plugkakdir" ]; then
        git clone https://github.com/robertmeta/plug.kak.git "$kak_opt_plugkakdir"
        echo "source '%opt{plugkak}"
    fi
}
plug "andreyorst/plug.kak" noload

# ========================================
# PLUGINS

# kakoune.cr (coderunner)
evaluate-commands %sh{
    kcr init kakoune
}

plug "alexherbo2/auto-pairs.kak" %{
    require-module auto-pairs
    auto-pairs-enable
}
plug "alexherbo2/move-line.kak" %{ require-module move-line }
plug "alexherbo2/phantom.kak" %{
    require-module phantom
    phantom-enable
    phantom-add-mappings
    map global normal "<c-n>" ": phantom-iterate-next-selection<ret>"
    map global normal "<c-p>" ": phantom-iterate-previous-selection<ret>"
}
plug "alexherbo2/search-highlighter.kak" %{
    require-module search-highlighter
    search-highlighter-enable
    face global Search default+du
}
plug "andreyorst/smarttab.kak"
plug "crizan/kak-rainbower" %{
    set global rainbow_mode 0
    set global rainbow_check_templates Y
    # Dark theme:
    set global rainbow_colors "rgb:ffd700" "rgb:da70d6" "rgb:87cefa"
    # Light theme:
    # set global rainbow_colors "rgb:daa520" "rgb:9932cc" "rgb:00bfff"
}
plug "delapouite/kakoune-mirror" %{
    map global normal "'" ": enter-user-mode -lock mirror<ret>"
    # Use a non-default register to avoid conflicting with phantom.kak
    map global mirror d '"pZ<a-S><a-d>"pz<a-:>H' -docstring 'delete'
}
plug "delapouite/kakoune-palette"
plug "delapouite/kakoune-text-objects"
plug "dgmulf/local-kakrc" config %{ set global source_local_kakrc true }
plug "kak-lsp/kak-lsp" do %{ cargo install --locked --force --path . } config %{
    map global user "l" ": enter-user-mode lsp<ret>" -docstring "lsp..."
    set global lsp_diagnostic_line_error_sign 'E'
    # Workaround for the lack of a proper LineFlagWarnings face
    set global lsp_diagnostic_line_warning_sign '{LineFlagWarnings}W'

    set global lsp_hover_anchor true

    def lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

    def -hidden lsp-init -docstring "enable lsp and set up generic hooks" %{
        echo -debug "Enabling LSP for filetype %opt{filetype}"
        lsp-enable-window
        set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

        set window lsp_auto_highlight_references true

        # Enable inlay and inline diagnostics in normal mode, but disable in insert mode
        lsp-inlay-diagnostics-enable window
        hook window ModeChange push:.*:insert %{
            lsp-inlay-diagnostics-disable window
            lsp-inline-diagnostics-disable window
        }
        hook window ModeChange pop:insert:.* %{
            lsp-inlay-diagnostics-enable window
            lsp-inline-diagnostics-enable window
        }

        # Function signature help in status bar
        lsp-auto-signature-help-enable

        # Experimental insert mode auto-hover
        lsp-auto-hover-insert-mode-enable

        # Semantic tokens
        hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
        hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
        hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
        hook -once -always window WinSetOption filetype=.* %{
            rmhooks window semantic-tokens
        }
    }

    hook global KakEnd .* lsp-exit
}
plug "lePerdu/kakboard"
plug "occivink/kakoune-find"
plug "occivink/kakoune-sort-selections"
plug "occivink/kakoune-vertical-selection"
plug "raiguard/one.kak" theme
plug "https://gitlab.com/Screwtapello/kakoune-state-save" %{
    hook global KakBegin .* %{
        state-save-reg-load colon
        state-save-reg-load pipe
        state-save-reg-load slash
    }

    hook global KakEnd .* %{
        state-save-reg-save colon
        state-save-reg-save pipe
        state-save-reg-save slash
    }
}

# ========================================
# SCRIPTS
# Sourced from autoload directory, gated behind modules

def plug-autoload -params 1..2 -docstring "req <name> <commands>" %{
    require-module "%arg{1}"
    try %{ evaluate-commands "%arg{2}" } catch %{}
}

plug-autoload fandt

plug-autoload "git-branch"

plug-autoload todo %{
    todo-enable
    todo-add-mapping
}

# ========================================
# GENERAL SETTINGS

# Color scheme
colorscheme one-darker
# source "~/dev/projects/personal/one.kak/one-light.kak"

# Highlighters
addhl global/ number-lines -relative -hlcursor -separator " ▏ " -min-digits 4
addhl global/ show-matching
addhl global/ show-whitespaces -tab "▏" -lf " " -nbsp "⋅" -spc " "
addhl global/trailing-whitespaces regex "(\h+)$" "1:default,rgba:%opt{darkred}%opt{selectionalpha}"

# RIP clippy and titles
set global ui_options ncurses_assistant=off ncurses_set_title=false

# Keep cursor away from the edges
set global scrolloff 5,5

# Auto-reload please!
set global autoreload yes

# Custom status bar format
set global modelinefmt "{StatusLineValue}%%val{bufname}{StatusLineValue}:%%val{cursor_line}:%%val{cursor_char_column}{StatusLine} %%sh{expr $kak_cursor_line \* 100 / $kak_buf_line_count}%%%%{{context_info}} {{mode_info}} {keyword}%%val{client}{StatusLineValue} {enum}%%val{session}{StatusLine}"

# Use ripgrep instead of grep
set global grepcmd 'rg -Hn --no-heading'

# ========================================
# EXTERNAL SETTINGS

def load-settings -params 1 %{
    source "%val{config}/%arg{1}.kak"
}

load-settings "commands"
load-settings "modes"
load-settings "hooks"
load-settings "keybindings"
