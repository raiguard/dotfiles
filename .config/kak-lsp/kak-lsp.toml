# GENERAL

verbosity = 2

# LANGUAGES

[language.c_cpp]
filetypes = ["c", "cpp"]
roots = [".ccls-root", "compile_commands.json"]
command = "ccls"
# kak-lsp does not support newText https://github.com/ul/kak-lsp/issues/40
args = ["--init={\"completion\":{\"detailedLabel\":false}}"]

[language.latex]
filetypes = ["tex", "latex"]
roots = [".git/"]
command = "texlab"

[language.lua]
filetypes = ["lua"]
roots = [".git/"]
command = "lua-language-server"
args = ["--logpath=/home/rai/.local/share/lua-language-server/log"]

[language.lua.settings.Lua]
diagnostics.severity = { unused-local = "Warning", undefined-global = "Error" }
workspace.ignoreSubmodules = false
diagnostics.disable = ["lowercase-global", "redefined-local"]
diagnostics.globals = ["__DebugAdapter", "__Profiler", "global", "data", "mods", "log", "serpent", "table_size", "localised_print"]
runtime.plugin = "/home/rai/dev/factorio/plugin/plugin.lua"
runtime.version = "Lua 5.2"
telemetry.enable = false
workspace.ignoreDir = [".vscode", "src/archive"]
workspace.library = [
    "/home/rai/dev/factorio/runtime-api.lua",
    "/home/rai/dev/factorio/1/data",
    "/home/rai/dev/projects/personal/flib",
]
workspace.preloadFileSize = 10000

[language.python]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg"]
command = "pyls"
offset_encoding = "utf-8"
workaround_server_sends_plaintext_labeled_as_markdown = true

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "/home/rai/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rust-analyzer"

[language.rust.settings.rust-analyzer]
checkOnSave.command = "clippy"

[language.tsx]
filetypes = ["typescript"]
roots = ["package.json"]
offset_encoding = "utf-8"
command = "typescript-language-server"
args = ['--stdio']

# SEMANTIC TOKENS

[[semantic_tokens]]
token = "arithmetic"
face = "operator"

[[semantic_tokens]]
token = "attribute"
face = "module"

[[semantic_tokens]]
token = "boolean"
face = "value"

[[semantic_tokens]]
token = "builtinType"
face = "type"

[[semantic_tokens]]
token = "character"
face = "string"

[[semantic_tokens]]
token = "colon"
face = "operator"

[[semantic_tokens]]
token = "comma"
face = "operator"

[[semantic_tokens]]
token = "comment"
face = "comment"

[[semantic_tokens]]
token = "comparison"
face = "operator"

[[semantic_tokens]]
token = "enum"
face = "module"

[[semantic_tokens]]
token = "enumMember"
face = "enum"

[[semantic_tokens]]
token = "formatSpecifier"
face = "operator"

[[semantic_tokens]]
token = "function"
face = "function"

[[semantic_tokens]]
token = "interface"
face = "module"

[[semantic_tokens]]
token = "keyword"
face = "keyword"

[[semantic_tokens]]
token = "lifetime"
face = "enum"

[[semantic_tokens]]
token = "logical"
face = "operator"

[[semantic_tokens]]
token = "macro"
face = "function"

[[semantic_tokens]]
token = "method"
face = "function"

[[semantic_tokens]]
token = "namespace"
face = "module"

[[semantic_tokens]]
token = "number"
face = "value"

[[semantic_tokens]]
token = "operator"
face = "operator"

[[semantic_tokens]]
token = "parameter"
face = "parameter"

[[semantic_tokens]]
token = "punctuation"
face = "operator"

[[semantic_tokens]]
token = "regexp"
face = "value"

[[semantic_tokens]]
token = "selfKeyword"
face = "value"

[[semantic_tokens]]
token = "semicolon"
face = "operator"

[[semantic_tokens]]
token = "string"
face = "string"

[[semantic_tokens]]
token = "struct"
face = "module"

[[semantic_tokens]]
token = "type"
face = "type"

[[semantic_tokens]]
token = "typeAlias"
face = "type"

[[semantic_tokens]]
token = "typeParameter"
face = "operator"

[[semantic_tokens]]
token = "unresolvedReference"
face = "module"

[[semantic_tokens]]
token = "variable"
face = "variable"

[[semantic_tokens]]
token = "variable"
face = "+s@variable"
modifiers = ["consuming"]
