#!/bin/sh

set -e

basedir="$FACTORIO"
mode="x64"
bin="factorio"
if [ -e "fastbuild/fbuild.bff" ]; then
  # We are in a Factorio source directory
  basedir="$PWD"
  mode="Debugx64GCC"
  bin="factorio-run"
  if [ -n "$1" ]; then
    modeinput=$1
    case $1 in
      --*) ;; # Ignore if it's a flag
      docs) # Open Lua documentation
        xdg-open $basedir/scripts/lua_doc/doc-files/index.html < /dev/null > /dev/null 2>&1 & disown
        exit
        ;;
      testasan) mode="DebugASANx64GCC"; bin="factorio-test"; shift ;;
      test) mode="Debugx64GCC"; bin="factorio-test"; shift ;;
      *)
        parsedmode=$(fd -i -I -t d \\b$1 bin | head -1 | awk -F / '{ print $2 }')
        if [ -n "$parsedmode" ]; then
          mode=$parsedmode
          shift
        fi
        ;;
    esac
  fi
fi

while getopts 'cfl:ms:' c
do
  case $c in
    c) fork=true; mpargs="--mp-connect localhost:34197" ;;
    f) fork=true ;;
    l) fork=true; locale=$OPTARG ;;
    m) fork=true; mpargs="--start-server-load-scenario" ;;
    s) fork=true; mpargs="--start-server $OPTARG" ;;
  esac
done
shift $((OPTIND-1))

# Allow running multiple instances at once
if [ $fork ]; then
  write=$(mktemp -d /tmp/frun.XXX)
  awk -v locale="locale=$locale" -v writedata="write-data=$write" '
    { flag = 1 }
    /write-data/ { flag = 0; print writedata }
    /locale/ { flag = 0; print locale }
    /check-updates/ { flag = 0; print "check-updates=false" }
    flag { print }
  ' $basedir/config/config.ini > $write/config.ini

  ln -s $basedir/atlas-cache.dat $write/atlas-cache.dat
  ln -s $basedir/crop-cache.dat $write/crop-cache.dat

  ln -s $basedir/mods $write/mods
  ln -s $basedir/saves $write/saves
  ln -s $basedir/scenarios $write/scenarios

  ln -s $basedir/server-adminlist.json $write/server-adminlist.json
  ln -s $basedir/server-settings.json $write/server-settings.json

  jq \
    --arg username $(echo "$write" | sed "s~/tmp/frun\.~~") \
    '.["service-username"] = $username | .["service-token"] = ""' \
    $basedir/player-data.json > $write/player-data.json

  echo "Forked - write directory: $write/config.ini"
  forkargs="--config $write/config.ini"
fi

$basedir/bin/$mode$arch/$bin $forkargs $mpargs "$@"

if [ -n "$write" ]; then
  rm -rf $write
fi
